{"version":3,"sources":["pages/SignUp.tsx"],"names":["Wrapper","styled","div","SignUp","AuthStore","useStores","history","useHistory","name","labelCol","span","wrapperCol","onFinish","values","console","log","setUsername","username","setPassword","password","signUp","then","user","push","catch","e","onFinishFailed","errorInfo","autoComplete","Item","label","rules","required","message","min","max","validator","_","value","test","Promise","reject","resolve","placeholder","Password","getFieldValue","offset","type","htmlType"],"mappings":"iLAKMA,EAAUC,IAAOC,IAAV,sKAiIEC,UArHA,WACb,IAAOC,EAAaC,cAAbD,UACDE,EAAUC,cAqBhB,OACE,eAACP,EAAD,WACE,8CACA,eAAC,IAAD,CACEQ,KAAK,QACLC,SAAU,CACRC,KAAM,GAERC,WAAY,CACVD,KAAM,IAERE,SA9BW,SAACC,GAChBC,QAAQC,IAAI,UAAWF,GACvBT,EAAUY,YAAYH,EAAOI,UAC7Bb,EAAUc,YAAYL,EAAOM,UAE7Bf,EAAUgB,SACPC,MAAK,SAAAC,GACJR,QAAQC,IAAI,6BAA8BO,GAC1ChB,EAAQiB,KAAK,QAEdC,OAAM,SAAAC,GACLX,QAAQC,IAAI,4BAA6BU,OAoBzCC,eAhBiB,SAACC,GACtBb,QAAQC,IAAI,UAAWY,IAgBnBC,aAAa,MAVf,UAYE,cAAC,IAAKC,KAAN,CACEC,MAAM,qBACNtB,KAAK,WACLuB,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,wCAEX,CACEC,IAAK,EACLD,QAAS,2DAEX,CACEE,IAAK,GACLF,QAAS,4DAEX,CACEG,UAAW,SAACC,EAAGC,GACb,MAAI,KAAKC,KAAKD,GAAeE,QAAQC,OAAO,oGACrCD,QAAQE,aAnBvB,SAwBE,cAAC,IAAD,CAAOC,YAAY,2CAGrB,cAAC,IAAKd,KAAN,CACEC,MAAM,eACNtB,KAAK,WACLuB,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,mCAEX,CACEC,IAAK,EACLD,QAAS,8BAVf,SAcE,cAAC,IAAMW,SAAP,CAAgBD,YAAY,qCAE9B,cAAC,IAAKd,KAAN,CACEC,MAAM,2BACNtB,KAAK,kBACLuB,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,mCAEX,gBAAEY,EAAF,EAAEA,cAAF,MAAsB,CACpBT,UADoB,SACVC,EAAGC,GACX,OAAIO,EAAc,cAAgBP,EACzBE,QAAQE,UAEVF,QAAQC,OAAO,kDAb9B,SAkBE,cAAC,IAAMG,SAAP,CAAgBD,YAAY,iDAG9B,cAAC,IAAKd,KAAN,CACElB,WAAY,CACVmC,OAAQ,GACRpC,KAAM,IAHV,SAME,cAAC,IAAD,CAAQqC,KAAK,UAAUC,SAAS,SAAhC","file":"static/js/12.a08c0b0b.chunk.js","sourcesContent":["import {Form, Input, Button} from 'antd';\nimport {useHistory} from 'react-router';\nimport {useStores} from 'stores';\nimport styled from 'styled-components';\n\nconst Wrapper = styled.div`\n  max-width: 600px;\n  margin: 30px auto;\n  box-shadow: 2px 2px 4px 0 rgba(0, 0, 0, 0.2);\n  border-radius: 4px;\n  padding: 20px 30px;\n`;\ntype UserInfo = {\n  username: string;\n  password: string;\n  confirmPassword: string;\n};\nconst SignUp = () => {\n  const {AuthStore} = useStores();\n  const history = useHistory();\n\n  const onFinish = (values: UserInfo) => {\n    console.log('sign up', values);\n    AuthStore.setUsername(values.username);\n    AuthStore.setPassword(values.password);\n\n    AuthStore.signUp()\n      .then(user => {\n        console.log('component: sign up success', user);\n        history.push('/');\n      })\n      .catch(e => {\n        console.log('component: sign up failed', e);\n      });\n  };\n\n  const onFinishFailed = (errorInfo: any) => {\n    console.log('Failed:', errorInfo);\n  };\n\n  return (\n    <Wrapper>\n      <h1>注册</h1>\n      <Form\n        name=\"basic\"\n        labelCol={{\n          span: 4,\n        }}\n        wrapperCol={{\n          span: 20,\n        }}\n        onFinish={onFinish}\n        onFinishFailed={onFinishFailed}\n        autoComplete=\"off\"\n      >\n        <Form.Item\n          label=\"用户名\"\n          name=\"username\"\n          rules={[\n            {\n              required: true,\n              message: '请输入用户名',\n            },\n            {\n              min: 3,\n              message: '用户名长度不能小于3',\n            },\n            {\n              max: 10,\n              message: '用户名长度不能大于10',\n            },\n            {\n              validator: (_, value: string) => {\n                if (/\\W/.test(value)) return Promise.reject('不能出现字母数字下划线以外的字符');\n                return Promise.resolve();\n              },\n            },\n          ]}\n        >\n          <Input placeholder=\"请输入用户名\" />\n        </Form.Item>\n\n        <Form.Item\n          label=\"密码\"\n          name=\"password\"\n          rules={[\n            {\n              required: true,\n              message: '请输入密码!',\n            },\n            {\n              min: 3,\n              message: '最少4字符',\n            },\n          ]}\n        >\n          <Input.Password placeholder=\"请输入密码\" />\n        </Form.Item>\n        <Form.Item\n          label=\"确认密码\"\n          name=\"confirmPassword\"\n          rules={[\n            {\n              required: true,\n              message: '请确认密码!',\n            },\n            ({getFieldValue}) => ({\n              validator(_, value) {\n                if (getFieldValue('password') === value) {\n                  return Promise.resolve();\n                }\n                return Promise.reject('两次密码不一致');\n              },\n            }),\n          ]}\n        >\n          <Input.Password placeholder=\"请再次输入密码\" />\n        </Form.Item>\n\n        <Form.Item\n          wrapperCol={{\n            offset: 10,\n            span: 24,\n          }}\n        >\n          <Button type=\"primary\" htmlType=\"submit\">\n            注册\n          </Button>\n        </Form.Item>\n      </Form>\n    </Wrapper>\n  );\n};\n\nexport default SignUp;\n"],"sourceRoot":""}